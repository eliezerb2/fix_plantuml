[
    {
        "label": "process_parameters",
        "importPath": "src.param_processor",
        "description": "src.param_processor",
        "isExtraImport": true,
        "detail": "src.param_processor",
        "documentation": {}
    },
    {
        "label": "process_parameters",
        "importPath": "src.param_processor",
        "description": "src.param_processor",
        "isExtraImport": true,
        "detail": "src.param_processor",
        "documentation": {}
    },
    {
        "label": "remove_adjacent_duplicates",
        "importPath": "src.remove_adjacent_duplicates",
        "description": "src.remove_adjacent_duplicates",
        "isExtraImport": true,
        "detail": "src.remove_adjacent_duplicates",
        "documentation": {}
    },
    {
        "label": "remove_adjacent_duplicates",
        "importPath": "src.remove_adjacent_duplicates",
        "description": "src.remove_adjacent_duplicates",
        "isExtraImport": true,
        "detail": "src.remove_adjacent_duplicates",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function to execute the fix_plantuml program.\n    \"\"\"\n    original_file_path, new_file_path, _ = process_parameters()\n    remove_adjacent_duplicates(original_file_path, new_file_path)\nif __name__ == '__main__':\n    main()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "process_parameters",
        "kind": 2,
        "importPath": "src.param_processor",
        "description": "src.param_processor",
        "peekOfCode": "def process_parameters():\n    \"\"\"\n    Process and validate command line parameters.\n    Returns:\n        tuple: original file path, new file path, and confirmation flag.\n    \"\"\"\n    parser = argparse.ArgumentParser(description='Process command line parameters.')\n    parser.add_argument('--original', required=True, help='Original file path')\n    parser.add_argument('--new', help='New file path')\n    parser.add_argument('--confirm', choices=['y', 'yes', 'all'], help='Confirmation flag')",
        "detail": "src.param_processor",
        "documentation": {}
    },
    {
        "label": "remove_adjacent_duplicates",
        "kind": 2,
        "importPath": "src.remove_adjacent_duplicates",
        "description": "src.remove_adjacent_duplicates",
        "peekOfCode": "def remove_adjacent_duplicates(input_file_path, output_file_path):\n    \"\"\"\n    Remove adjacent duplicate lines from an input file and write to an output file.\n    Args:\n        input_file_path (str): Path to the input file.\n        output_file_path (str): Path to the output file.\n    \"\"\"\n    with open(input_file_path, 'r') as infile, open(output_file_path, 'w') as outfile:\n        previous_line = None\n        for line in infile:",
        "detail": "src.remove_adjacent_duplicates",
        "documentation": {}
    },
    {
        "label": "TestParamProcessor",
        "kind": 6,
        "importPath": "tests.test_param_processor",
        "description": "tests.test_param_processor",
        "peekOfCode": "class TestParamProcessor(unittest.TestCase):\n    \"\"\"\n    Test cases for process_parameters function.\n    \"\"\"\n    def setUp(self):\n        \"\"\"\n        Set up test environment.\n        \"\"\"\n        # Create a temporary file to simulate the original file\n        self.original_file = tempfile.NamedTemporaryFile(delete=False)",
        "detail": "tests.test_param_processor",
        "documentation": {}
    },
    {
        "label": "TestRemoveAdjacentDuplicates",
        "kind": 6,
        "importPath": "tests.test_remove_adjacent_duplicates",
        "description": "tests.test_remove_adjacent_duplicates",
        "peekOfCode": "class TestRemoveAdjacentDuplicates(unittest.TestCase):\n    \"\"\"\n    Test cases for remove_adjacent_duplicates function.\n    \"\"\"\n    def setUp(self):\n        \"\"\"\n        Set up test environment.\n        \"\"\"\n        self.input_sample_file = 'tests/test_files/input_sample.plantuml'\n        self.output_sample_file = 'tests/test_files/output_sample.plantuml'",
        "detail": "tests.test_remove_adjacent_duplicates",
        "documentation": {}
    }
]